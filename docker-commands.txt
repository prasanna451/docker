docker version:

docker -v:

docker:

docker volume ls:

docker volume help:

docker images:

docker image help:

docker info:
overall info

docker system help:

docker system df:
show disk usage

docker system events:
real time events from the server

docker system info - display system-wide information.

man docker system - shows manual page.

docker

docker stats - show real time memory/cpu.

docker search <image> - docker search httpd - shows all images in dockerhub
it has username plus imagename

docker pull <imagename> - docker pull httpd.

after pull image give docker system info command.

docker ps

docker run --name web1 httpd - container runs in foreground and cant access from outer world bcas it has no port forwarding.

doker run -itd --name web2 -p 80:80 httpd:
docker run -<interactive><terminal><dashboard> --name <container name> -<portforwarding> <browser acccess port>:<containerport> <imagename>

doker run -itd --name web2 -P httpd: gives random port.

docker ps -a

docker exec -it <containername / containerID> /bin/bash

ip a / netstat-tulpn - shows IP.

docker cp

docker cp sysinfo 31b038:/tmp/
docker cp <filename> <containerID:<file path>

docker exec web2 ls /tmp/
without login you can use linux commands inside the container.

docker cp web2:/tmp/sysinfo .
to cpoy files inside cont to local system

docker stop web2
            <cont-name>

docker start web2

docker rm -f web2
to rm forcefully

docker logs web2
            <cont-name>

docker top
to check usage


docker top web2
          <cont-name>

docker pull <imagename>:tag

docker inspect <imagename:tag>
details of the image

docker history <imagename:tag>
show history

docker save ubuntu:latest > ubuntu-bkp.tar
docker save <imagename:tag / image ID> > <urimagename.tar>

scp ubuntu-bkp.tar selva@192.0.0.0:/home/selva/
    <urimagename.tar> <ec2@IP:path>

docker load -i ubuntu-bkp.tar
               <urimagename.tar>


docker rmi <imagename>

docker rmi $(sudo docker images -a -q)
             <list all images>


docker exec -it <cont-ID> /bin/bash
apt-get install curl
apt-get install nmap
apt-get update

docker commit <cont-ID>
just convert this into image, not give name and tag

docker commit <cont-ID> customimg:2.1
                        <imagename:tag>
it just give tag and name and doesnt give username

docker tag customimage:2.1 learnguide/customeimage:2.1
to rename image name with user + imagename bcas it will consider it as official image

docker push learnguide/customeimage:2.1

docker login

vi Dockerfile

docker build .

docker build -f <path>

docker build - myweb:latest .
               <imagename:tag>

docker inspect <imageID>

ip a

docker network ls

docker network --help

docker network create test-bridge

docker network inspect bridge
you can inspect name, subnet, ip, network bridge name.

ip a:
u can see the docker0 network and ip,

docker network inspect test-bridge
u can see the ip as different compared to bridge network.

docker run -itd --network=test-bridge --name cont1 -p 80:80 httpd
                <network name>        <containername>
to create cont1 in newly created network

docker inspect cont1
login inside the cont
apt-get install net-tools
apt-get install telnet
apt-get install ping
apt-get install iputils-ping
with ip check ping command and check curl ip:80

docker run -itd --network=none --name cont2 -p 81:80 httpd

docker run -itd --network=host --name cont3 -p 82:80 httpd

ip a
u will get docker host ip- with this ip u can access from outside the browser.

docker volume

docker volume ls

docker volume create data_vol

docker inspect volume data_vol
will show tha mount path

If we have volumes, then we use this type:
docker run -itd --name cont-volume --mount source=data_vol,destination=/data httpd /bin/bash
                 <containername> <mounting path>     <inside the container> <imagename>

If we dont have volumes then we do:
docker run -itd --name cont-new-volume -v /data/mnt:/selva httpd /bin/bash
                                          src:dest       <imagename>

docker volume rm data_vol

docker compose:
to manage multiple containers


apt-cache search docker-compose
apt-get install docker-compose

docker-compose version

git clone https://github.com/learnitguide/kubernetes-knote
this has sample docker compose file

docker-compose

docker-compose up
it will work if you have docker-compose.yaml file

otherwise apply this command

docker-compose -f myapp.yaml up

if u need to run in background
docker-compose up -d

docker-compose images

docker-compose ps

docker-compose down

docker-compose restart
it will restart all containers

docker ps -a

docker-compose restart <servicename-mentioned inside the yaml file>

docker-compose logs <cont-name>

docker-compose config

docker run --memory-reservation=256 -m 512 -d --name web1 httpd
             <lower limit>             <higher limit>

docker run --cpu=1.2 -d --name web3 httpd

docker run --cpu-shares=1000 --cpu=1 -d --name web3 httpd

if u need to specify in docker-compose.yaml
deploy:
    resources:
        limits:
          cpus: "0.50"
          memory: "1024M"
        reservation:
          cpus: "0.25"
          memory: "256M"





















































































































































































